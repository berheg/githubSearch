{"version":3,"sources":["api/index.js","components/Loading.js","components/NoItem.js","components/Card.jsx","components/Input.jsx","components/Head.jsx","components/context/userContext.js","components/ErrorItem.jsx","components/Users.jsx","App.js","serviceWorker.js","index.js"],"names":["getUser","input","a","fetch","response","json","Loading","NoItem","Card","children","style","padding","border","textAlign","Input","divStyle","type","name","inputStyle","onChange","this","props","handleInputChange","placeholder","Component","boxShadow","alignSelf","List","UserContext","React","createContext","UserProvider","Provider","UserConsumer","Consumer","ErrorItem","error","Users","state","users","isLoading","inputValue","noItem","errorValue","usersLength","e","setState","target","value","console","log","API","status","items","filter","user","String","login","startsWith","length","message","Head","map","key","id","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19c5ec1b.chunk.js","sourcesContent":["\r\nasync function getUser(input) {   \r\n  const response = await fetch(`https://api.github.com/search/users?q=${input}`);\r\n  return response.json();\r\n}\r\n\r\n\r\n\r\nexport { getUser };","import React from \"react\";\r\n\r\nexport default function Loading() {\r\n  return <div>Loading...</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function NoItem() {\r\n  return <div>No Item</div>;\r\n}","import React from \"react\";\r\n\r\nexport default function Card({ children }) {\r\n  return (\r\n    <div style={{ padding: 50, border: \"1px solid #fff\", textAlign: \"center\" }}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React,{Component} from 'react';\r\n\r\nclass Input extends Component {\r\n  \r\n  \r\n  render(){\r\n    \r\n  return (\r\n    <form style={divStyle}>  \r\n     \r\n      <input type='text' name = 'userLogin' style={inputStyle} \r\n      onChange = {this.props.handleInputChange} \r\n      placeholder={\"Search for user\"}/>  \r\n    </form>\r\n  );\r\n};\r\n};\r\nconst inputStyle = {\r\n  boxShadow: '0 0 0 5px orange',\r\n  alignSelf: 'center'\r\n\r\n}\r\nconst divStyle = {  \r\n  alignSelf: 'center',\r\n  textAlign: 'center',  \r\n\r\n}\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nconst List = props => {\r\n  return (    \r\n         <div>       \r\n              <h1>\r\n                  Github Users Search\r\n              </h1> \r\n          </div>   \r\n          )\r\n       \r\n};\r\n\r\n\r\nexport default List;","import React from 'react'\r\n\r\nconst UserContext = React.createContext()\r\n\r\nconst UserProvider = UserContext.Provider\r\nconst UserConsumer = UserContext.Consumer\r\n\r\nexport { UserProvider, UserConsumer }","import React from \"react\";\r\nimport {UserConsumer} from \"./context/userContext\";\r\nexport default class ErrorItem extends React.Component {\r\n    render(){\r\n        return(\r\n            <UserConsumer>\r\n                {\r\n                    (error) =>{\r\n                       return <li>Error: {error}</li>;\r\n                    }\r\n                }\r\n            </UserConsumer>\r\n        ) \r\n    }\r\n  \r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as API from \"../api\";\r\nimport Loading from \"./Loading\";\r\nimport NoItem from \"./NoItem\";\r\nimport Card from \"./Card\";\r\nimport Input from \"./Input\";\r\nimport Head from \"./Head\";\r\nimport ErrorItem from \"./ErrorItem\";\r\nimport {UserProvider} from './context/userContext';\r\n\r\nexport default class Users extends Component {\r\n  state = {\r\n    users: [],\r\n    isLoading: false,\r\n    inputValue: '',\r\n    noItem: true,\r\n    error: false,\r\n    errorValue: [],\r\n    usersLength: false\r\n  };  \r\n  \r\n  handleInputChange = async (e) =>{\r\n    this.setState({inputValue: e.target.value});\r\n    console.log(this.state.inputValue);      \r\n    console.log(this.state.users);\r\n    this.setState({noItem: false});\r\n    this.setState({isLoading: true});\r\n\r\n    try{\r\n        const inputValue = this.state.inputValue;        \r\n        const users = await API.getUser(inputValue);\r\n        console.log(users.status);\r\n        this.setState({ users:users.items, isLoading: false, error: false });        \r\n        this.setState({users: this.state.users.filter(user =>String(user.login).startsWith(this.state.inputValue)) });\r\n        \r\n        console.log(this.state.users);        \r\n        if(this.state.users.length){\r\n          this.setState({usersLength: this.state.users.length})\r\n        }\r\n        if(!this.state.users.length){\r\n            this.setState({noItem: true})\r\n        }    \r\n    }catch(err){        \r\n        this.setState({errorValue: err.message, isLoading: false, error: true});\r\n        console.error(err.message);\r\n    }\r\n  \r\n  }\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Head />\r\n        <Input handleInputChange={this.handleInputChange} placeholder={'Search For User'}/>\r\n        {this.state.isLoading && <Loading />}\r\n        {this.state.noItem && <NoItem />}\r\n        <UserProvider value={this.state.errorValue}>\r\n          {this.state.error  && <ErrorItem errorValue={this.state.errorValue}/>}\r\n        </UserProvider>\r\n         \r\n        <UserProvider value= {this.state.users}>\r\n        {this.state.usersLength && this.state.users.map(user => (\r\n            <li key={user.id}>{user.login}</li>\r\n            ))}\r\n        </UserProvider>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Users from \"./components/Users\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">        \n        <h1>Github Users</h1>\n      </header>\n      <div className=\"App-body\">\n        <Users />\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}